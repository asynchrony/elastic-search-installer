#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

# Use the packaged gli gem stored in vendor/gems so that we do not have to
# depend on having rubygems or bundler installed
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'vendor', 'gems', 'gli-1.3.7', 'lib'))

require 'gli'
require 'elastic_search_installer_version'
require 'installer'
require 'uninstaller'
require 'installation_smoke_test'

include GLI

program_desc 'Install Elastic Search as a service'

version ElasticSearchInstaller::VERSION

desc 'Installs Elastic Search'
command :install do |c|
  c.desc 'Force install, blow away any current installation before install'
  c.switch [:f, :force]

  c.action do |global_options,options,args|
    installer = Installer.new(options)
    if installer.valid?
      installer.call

      if InstallationSmokeTest.call
        puts %Q(
****************************
      I kan haz surch!
****************************

Elastic Search has been installed at #{Installer.elastic_install_dir}
)
      else
        puts %Q(
!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    Installation Failed
!!!!!!!!!!!!!!!!!!!!!!!!!!!!

The smoke test for this installation failed.
The failed install remains at #{Installer.elastic_install_dir}
)
      end
    else
      puts installer.error_messages
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
